#ifndef DRXCC_H
#define DRXCC_H

#include <QtWidgets/QMainWindow>
#include <qmessagebox.h>
#include "ui_drxcc.h"

#include <Windows.h>
#include <qlist.h>




#define IOCTL_LIST_PROCESS_NOTIF CTL_CODE(FILE_DEVICE_UNKNOWN, 0x010, METHOD_NEITHER, FILE_READ_DATA | FILE_WRITE_DATA)
#define IOCTL_DEREF_PROCESS_NOTIF CTL_CODE(FILE_DEVICE_UNKNOWN, 0x011, METHOD_NEITHER, FILE_READ_DATA | FILE_WRITE_DATA)

#define IOCTL_LIST_THREAD_NOTIF CTL_CODE(FILE_DEVICE_UNKNOWN, 0x020, METHOD_NEITHER, FILE_READ_DATA | FILE_WRITE_DATA)
#define IOCTL_DEREF_THREAD_NOTIF CTL_CODE(FILE_DEVICE_UNKNOWN, 0x021, METHOD_NEITHER, FILE_READ_DATA | FILE_WRITE_DATA)

#define IOCTL_LIST_IMAGE_NOTIF CTL_CODE(FILE_DEVICE_UNKNOWN, 0x030, METHOD_NEITHER, FILE_READ_DATA | FILE_WRITE_DATA)
#define IOCTL_DEREF_IMAGE_NOTIF CTL_CODE(FILE_DEVICE_UNKNOWN, 0x031, METHOD_NEITHER, FILE_READ_DATA | FILE_WRITE_DATA)

#define IOCTL_LIST_REG_NOTIF CTL_CODE(FILE_DEVICE_UNKNOWN, 0x040, METHOD_NEITHER, FILE_READ_DATA | FILE_WRITE_DATA)
#define IOCTL_DEREF_REG_NOTIF CTL_CODE(FILE_DEVICE_UNKNOWN, 0x041, METHOD_NEITHER, FILE_READ_DATA | FILE_WRITE_DATA)

#define IOCTL_PROC_DUP_TOKEN CTL_CODE(FILE_DEVICE_UNKNOWN, 0x051, METHOD_NEITHER, FILE_READ_DATA | FILE_WRITE_DATA)
#define IOCTL_PROC_PROTECT CTL_CODE(FILE_DEVICE_UNKNOWN, 0x052, METHOD_NEITHER, FILE_READ_DATA | FILE_WRITE_DATA)




typedef struct _PS_PROTECTION {
	UCHAR Type : 3;
	UCHAR Audit : 1;
	UCHAR Signer : 4;
} PS_PROTECTION, *PPS_PROTECTION;

typedef struct _DRX_PROCESS_SIGNATURE_PROTECTION {
	UCHAR SignatureLevel;
	UCHAR SectionSignatureLevel;
	PS_PROTECTION Protection;
} DRX_PROCESS_SIGNATURE_PROTECTION, *PDRX_PROCESS_SIGNATURE_PROTECTION;

typedef struct _DRXDRV_PROCESS_PROTECT_INFORMATION {
	ULONG processId;
	DRX_PROCESS_SIGNATURE_PROTECTION SignatureProtection;
} DRXDRV_PROCESS_PROTECT_INFORMATION, *PDRXDRV_PROCESS_PROTECT_INFORMATION;



class drxCC : public QMainWindow
{
	Q_OBJECT

public:
	drxCC(QWidget *parent = 0);
	~drxCC();
	

private:
	Ui::drxCCClass ui;
	HANDLE m_DeviceHandle;
	static WCHAR* m_DeviceName;
	bool OpenDevice();

	void GetNotifyRoutine(DWORD ioctl);
	void DerefCallback(DWORD ioctl, PVOID addr);

private slots:
	void on_GetCallBacksClicked();
	void on_DerefCallbackClicked();
	void on_ImpersonateKernelClicked();
	void on_ProtectProcessClicked();

};

#endif // DRXCC_H
